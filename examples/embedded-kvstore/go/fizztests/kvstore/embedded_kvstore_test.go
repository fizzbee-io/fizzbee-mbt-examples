// Code generated by fizzbee-mbt generator; DO NOT EDIT.

package kvstore

import (
	"log"
	"os"
	"testing"

	mbt "github.com/fizzbee-io/fizzbee/mbt/lib/go"
)

// Registry keyed by role type ("" means top-level model actions)
var actionRegistry = map[string]map[string]mbt.ActionFunc{
	"": {
		"TopLevelSomething": func(inst any, args []mbt.Arg) (any, error) {
			return inst.(EmbeddedKvstoreModel).ActionTopLevelSomething(args)
		},
	},
	"Writer": {
		"Put": func(inst any, args []mbt.Arg) (any, error) {
			return inst.(WriterRole).ActionPut(args)
		},
		"Get": func(inst any, args []mbt.Arg) (any, error) {
			return inst.(WriterRole).ActionGet(args)
		},
		"Flush": func(inst any, args []mbt.Arg) (any, error) {
			return inst.(WriterRole).ActionFlush(args)
		},
	},
	"Storage": {},
}

func TestEmbeddedKvstore(t *testing.T) {
	model := NewEmbeddedKvstoreModel()
	options := GetTestOptions()
	// opts := mbt.StartOptions{
	// 	Network: mbt.NetworkUDS,
	// 	Address: "/tmp/fizzbee_mbt.sock",
	// }

	// // opts := mbt.StartOptions{
	// // 	Network: mbt.NetworkTCP,
	// // 	Address: ":12345",
	// // }
	// mbt.Start(t, model, actionRegistry, opts)
	err := mbt.RunTests(t, model, actionRegistry, options)
	if err != nil {
		log.Fatal(err)
	}
}

func TestMain(m *testing.M) {
	mbt.ParseFlags()
	exitCode := m.Run()
	os.Exit(exitCode)
}
